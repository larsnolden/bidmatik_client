# source: http://localhost:4000
# timestamp: Fri Oct 11 2019 16:43:53 GMT+0200 (CEST)

type AdGroup {
  id: ID!
  name: String!
  adGroupSettings: adGroupSettings!
  Keywords(from: Date, to: Date, sortBy: KeywordSortBy): [Keyword]!
  AdGroupPerformanceReduced(from: Date, to: Date): Performance
  AdGroupPerformanceDelta(from: Date, to: Date): PerformancePercent
  AdGroupPerformance(from: Date, to: Date): [Performance]
}

type adGroupSettings {
  dailyBudget: Int
  updateBids: Boolean!
  targetAcos: Float
  addKeywords: Boolean!
  addNegativeKeywords: Boolean!
}

input AdGroupSettingsInput {
  dailyBudget: Int
  updateBids: Boolean!
  targetAcos: Float
  addKeywords: Boolean!
  addNegativeKeywords: Boolean!
}

enum AdType {
  SP
  SB
}

type AuthToken {
  token: String!
}

type Campaign {
  id: ID!
  name: String!
  budget: Float!

  """Reduce all samples in requested time into one sample"""
  CampaignPerformanceReduced(from: Date, to: Date): Performance

  """Percent change of data compared to previous period"""
  CampaignPerformanceDelta(from: Date, to: Date): PerformancePercent
  AdGroups(from: Date, to: Date): [AdGroup]!
}

enum CountryCode {
  US
  MX
  CA
  DE
  UK
  IT
}

"""Date custom scalar type"""
scalar Date

type Keyword {
  id: ID!
  term: String!

  """
  we want to display the current bid
  and the average bid over the selected time period
  (bid is not a reported value only, it will be modifiable)
  """
  bid: Float!
  matchType: MatchType!
  automated: Boolean!
  state: KeywordState!
  KeywordPerformanceDelta(from: Date, to: Date): PerformancePercent
  KeywordPerformanceReduced(from: Date, to: Date): Performance
}

enum KeywordSortBy {
  spend
}

enum KeywordState {
  enabled
  paused
  archived
}

enum MatchType {
  exact
  phrase
  broad
}

type Mutation {
  _empty: String
  createSession(authCode: String!): AuthToken!
  SetActiveSellerProfile(id: ID!): SellerProfile!
  SetUserFilterDates(input: UserFilterDatesInput!): UserFilterDates!
  setAdGroupSettings(input: AdGroupSettingsInput!, adGroupId: ID!): adGroupSettings
}

type Performance {
  date: Date
  impressions: Int
  clicks: Int
  ctr: Float
  spend: Float
  cpc: Float
  orders: Int
  revenue: Float
  acos: Float
  absoluteRevenue: Float
  absoluteAcos: Float
}

type PerformancePercent {
  impressions: Float
  clicks: Float
  ctr: Float
  spend: Float
  orders: Float
  revenue: Float
  acos: Float
  absoluteAcos: Float
}

type Query {
  _empty: String
  Campaign(id: ID!): Campaign
  SellerProfiles: [SellerProfile!]!

  """return activeSellerProfile if no id specified"""
  SellerProfile(id: ID): SellerProfile!
  ActiveSellerProfile: SellerProfile!
  UserFilterDates: UserFilterDates
  Keyword(id: ID!): Keyword
  AdGroup(id: ID!): AdGroup
}

type SellerProfile {
  id: ID!
  name: String!
  countryCode: CountryCode!

  """include all campaigns that have to report any data in that time window"""
  Campaigns(from: Date, to: Date): [Campaign]!

  """Reduce all samples in requested time into one sample"""
  ProfilePerformanceReduced(from: Date, to: Date): Performance!

  """Return all samples in requested time"""
  ProfilePerformance(from: Date, to: Date): [Performance]!
}

enum Targeting {
  Automatic
  Manual
}

type UserFilterDates {
  id: ID!
  from: Date!
  to: Date!
}

input UserFilterDatesInput {
  from: Date!
  to: Date!
}
